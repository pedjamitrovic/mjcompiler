package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	boolean errorDetected = false;

	Logger log = Logger.getLogger(getClass());


    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke

    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }

    public void syntax_error(Symbol cur_token) {
        report_error("Syntax error ", cur_token);
    }

    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatal error, parsing cannot be continued", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message);
    	if (info instanceof Symbol)
            msg.append ("on line ").append(((Symbol)info).left);
        log.error(msg.toString());
    }

    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message);
    	if (info instanceof Symbol)
            msg.append ("on line ").append(((Symbol)info).left);
        log.info(msg.toString());
    }

:}

scan with {:
	Symbol s = this.getScanner().next_token();
	/*if (s != null && s.value != null)
		log.info(s.toString() + " " + s.value.toString());*/
	return s;
:}

terminal PROGRAM, BREAK, CLASS, INTERFACE, ENUM, ELSE, CONST, IF, NEW;
terminal PRINT, READ, RETURN, VOID, FOR, EXTENDS, IMPLEMENTS, CONTINUE;
terminal PLUS, MINUS, MUL, DIV, MOD, EQ, NEQ;
terminal GT, GTE, LT, LTE, AND, OR, ASSIGN, INC, DEC;
terminal SEMI, COMMA, DOT, LPAREN, RPAREN, LBOX, RBOX, LBRACE, RBRACE;

terminal Integer NUM_CONST;
terminal Character CHAR_CONST;
terminal Boolean BOOL_CONST;
terminal String IDENT;

nonterminal Program;
nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgramDecl;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Type;
nonterminal DeclList;
nonterminal SectDecl;
nonterminal ConstSect;
nonterminal ConstSectDecl;
nonterminal ConstList;
nonterminal rs.etf.pp1.symboltable.concepts.Obj ConstDecl;
nonterminal ConstValue;
nonterminal VarSect;
nonterminal VarSectDecl;
nonterminal VarList;
nonterminal rs.etf.pp1.symboltable.concepts.Obj VarDecl;
nonterminal Enumeration;
nonterminal rs.etf.pp1.symboltable.concepts.Obj EnumDecl;
nonterminal EnumConstList;
nonterminal rs.etf.pp1.symboltable.concepts.Obj EnumConstDecl;
nonterminal OptEnumConstValue;
nonterminal FieldSectList;
nonterminal FieldSect;
nonterminal OptMethodList;
nonterminal rs.etf.pp1.symboltable.concepts.Obj ClassDef;
nonterminal rs.etf.pp1.symboltable.concepts.Obj ClassDecl;
nonterminal ClassExtends;
nonterminal ClassImplements;
nonterminal ITypeList;
nonterminal ImplementsType;
nonterminal rs.etf.pp1.symboltable.concepts.Obj InterfaceDef;
nonterminal InterfaceDecl;
nonterminal InterfaceMethodList;
nonterminal MethodList;
nonterminal VarSectList;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Method;
nonterminal rs.etf.pp1.symboltable.concepts.Obj MethodSignature;
nonterminal rs.etf.pp1.symboltable.concepts.Obj MethodDecl;
nonterminal RetType;
nonterminal BoxesOpt;
nonterminal FormPars;
nonterminal FormParsList;
nonterminal FormParDecl;
nonterminal Statement;
nonterminal ForDecl;
nonterminal IfDecl;
nonterminal ElseDecl;
nonterminal PrintOptNumFields;
nonterminal StatementList;
nonterminal rs.etf.pp1.symboltable.concepts.Obj MethodCall;
nonterminal rs.etf.pp1.symboltable.concepts.Obj MethodCallDecl;
nonterminal DesignatorStatement;
nonterminal OptDesignatorStatement;
nonterminal OptCondition;
nonterminal PostForOptDesignatorStatement;
nonterminal ActPars;
nonterminal ActParsList;
nonterminal ActParDecl;
nonterminal Condition;
nonterminal CondTerm;
nonterminal CondFact;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Expr;
nonterminal OptMinus;
nonterminal OptExpr;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Term;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Factor;
nonterminal OptNewArray;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Designator;
nonterminal Relop;
nonterminal Addop;
nonterminal Mulop;

precedence left ELSE;

Program ::= (ProgramNode) ProgramDecl DeclList LBRACE MethodList RBRACE;

ProgramDecl ::= (ProgramDeclNode) PROGRAM IDENT:programName;

Type ::= (TypeNode) IDENT:typeName;

DeclList ::= (DeclListNode) DeclList SectDecl
            |
            (NoDeclListNode) /* epsilon */
            ;

SectDecl ::= (ConstDeclarationsNode) ConstSect
			|
			(VarDeclarationsNode) VarSect
			|
			(EnumDeclarationsNode) Enumeration
			|
            (ClassDefsNode) ClassDef
            |
            (InterfaceDefsNode) InterfaceDef
			;

ConstSect ::= (ConstSectNode) ConstSectDecl ConstList SEMI;

ConstSectDecl ::= (ConstSectDeclNode) CONST Type;

ConstList ::= (ConstListNode) ConstList COMMA ConstDecl
            |
            (ConstNode) ConstDecl
            ;

ConstDecl ::= (ConstDeclNode) IDENT:constName ASSIGN ConstValue;

ConstValue ::= (NumConstNode) NUM_CONST:value
               |
               (CharConstNode) CHAR_CONST:value
               |
               (BoolConstNode) BOOL_CONST:value
               ;

VarSect ::= (VarSectNode) VarSectDecl VarList SEMI
            |
            (ErrorVarSectNode) error:e SEMI {: parser.report_error("Invalid variable declaration. ", null); :}
            ;

VarSectDecl ::= (VarSectDeclNode) Type;

VarList ::= (VarListNode) VarList COMMA VarDecl
            |
            (VarNode) VarDecl
            ;

VarDecl ::= (VarDeclNode) IDENT:varName BoxesOpt
            |
            (ErrorVarDeclNode) error:e {: parser.report_error("Invalid variable declaration. ", null); :}
            ;

Enumeration ::= (EnumNode) EnumDecl LBRACE EnumConstList RBRACE;

EnumDecl ::= (EnumDeclNode) ENUM IDENT:enumName;

EnumConstList ::= (EnumConstListNode) EnumConstList COMMA EnumConstDecl
                |
                (EnumConstNode) EnumConstDecl
                ;

EnumConstDecl ::= (EnumConstDeclNode) IDENT:enumConstName OptEnumConstValue;

OptEnumConstValue ::= (OptEnumConstValueNode) ASSIGN NUM_CONST:value
                    |
                    (NoOptEnumConstValueNode)  /* epsilon */
                    ;

FieldSectList ::= (FieldSectListNode) FieldSectList FieldSect
                |
                (NoFieldSectListNode) /* epsilon */
                |
                (ErrorFieldSectListNode) error:e
                ;

FieldSect ::= (FieldSectNode) VarSectDecl VarList SEMI;

OptMethodList ::= (OptMethodListNode) LBRACE MethodList RBRACE
                |
                (NoOptMethodList) /* epsilon */
                ;

ClassDef ::= (ClassDefNode) ClassDecl ClassExtends ClassImplements LBRACE FieldSectList OptMethodList RBRACE;

ClassDecl ::= (ClassDeclNode) CLASS IDENT:name;

ClassExtends ::= (ClassExtendsNode) EXTENDS Type
                |
                (NoClassExtendsNode)  /* epsilon */
                |
                (ErrorClassExtendsNode)  error:e
                ;

ClassImplements ::= (ClassImplementsNode) IMPLEMENTS ITypeList
                |
                (NoClassImplementsNode) /* epsilon */
                ;

ITypeList ::= (ITypeListNode) ITypeList COMMA ImplementsType
            |
            (ITypeNode) ImplementsType
            ;

ImplementsType ::= (ImplementsTypeNode) Type;

InterfaceDef ::= (InterfaceDefNode) InterfaceDecl LBRACE InterfaceMethodList RBRACE;

InterfaceDecl ::= (InterfaceDeclNode) INTERFACE IDENT:name;

InterfaceMethodList ::= (InterfaceMethodListNode) InterfaceMethodList MethodSignature SEMI
                    |
                    (InterfaceMethodNode) MethodSignature SEMI
                    ;

MethodList ::= (MethodListNode) MethodList Method
				|
				(NoMethodListNode) /* epsilon */
				;

VarSectList ::= (VarSectListNode) VarSectList VarSect
                |
                (NoVarSectListNode) /* epsilon */
                ;

Method ::= (MethodNode) MethodSignature VarSectList LBRACE StatementList RBRACE;

MethodSignature ::= (MethodSignatureNode) MethodDecl LPAREN FormPars RPAREN;

MethodDecl ::= (MethodDeclNode) RetType IDENT:methodName;

RetType ::= (RetTypeNode) Type
            |
            (VoidRetTypeNode) VOID
            ;

BoxesOpt ::= (BoxesNode) LBOX RBOX
            |
            (NoBoxesNode) /* epsilon */
            ;

FormPars ::= (FormParsNode) FormParsList
			|
			(NoFormParsNode) /* epsilon */
			;

FormParsList ::= (FormParsListNode) FormParsList COMMA FormParDecl
				|
				(FormParNode) FormParDecl
				;

FormParDecl ::= (FormParDeclNode) Type IDENT:parName BoxesOpt
                |
                (ErrorFormParDeclNode) error:e {: parser.report_error("Invalid formal parameter declaration. ", null); :}
                ;

Statement ::= (DesignatorStmtNode) DesignatorStatement SEMI
			|
			(IfStmtNode) IfDecl Statement
			|
			(IfElseStmtNode) IfDecl Statement ElseDecl Statement
			|
			(ForStmtNode) ForDecl SEMI OptCondition SEMI PostForOptDesignatorStatement RPAREN Statement
			|
			(BreakStmtNode) BREAK SEMI
			|
			(ContinueStmtNode) CONTINUE SEMI
			|
			(ReturnStmtNode) RETURN OptExpr SEMI
			|
			(ReadStmtNode) READ LPAREN Designator RPAREN SEMI
			|
			(PrintStmtNode) PRINT LPAREN Expr PrintOptNumFields RPAREN SEMI
			|
			(BlockStmtNode) LBRACE StatementList RBRACE
			|
            (ErrorStmtNode) error:e SEMI {: parser.report_error("Invalid statement. ", null); :}
			;

ForDecl ::= (ForDeclNode) FOR LPAREN OptDesignatorStatement;

PostForOptDesignatorStatement ::= (PostForOptDesignatorStatementNode) OptDesignatorStatement;

IfDecl ::= (IfDeclNode) IF LPAREN Condition RPAREN;

ElseDecl ::= (ElseDeclNode) ELSE;

PrintOptNumFields ::= (PrintOptNumFieldsNode) COMMA NUM_CONST:value
                    |
                    (NoPrintOptNumFieldsNode) /* epsilon */
                    ;

StatementList ::= (StatementsNode) StatementList Statement
				|
				(NoStatementsNode) /* epsilon */
				;

MethodCall ::= (MethodCallNode) MethodCallDecl LPAREN ActPars RPAREN;

MethodCallDecl ::= (MethodCallDeclNode) Designator;

DesignatorStatement ::= (DesignatorStmtAssignNode) Designator ASSIGN Expr
					|
					(DesignatorStmtCallNode) MethodCall
					|
					(DesignatorStmtIncNode) Designator INC
					|
					(DesignatorStmtDecNode) Designator DEC
					;

OptDesignatorStatement ::= (DesignatorStatementNode) DesignatorStatement
						|
						(NoDesignatorStatementNode) /* epsilon */
						;

OptCondition ::= (OptConditionNode) Condition
                |
                (NoOptConditionNode) /* epsilon */
                ;

ActPars ::= (ActParsNode) ActParsList
          |
          (NoActParsNode) /* epsilon */
          ;

ActParsList ::= (ActParsListNode) ActParsList COMMA ActParDecl
            |
            (ActParNode) ActParDecl
            ;

ActParDecl ::= (ActParDeclNode) Expr;

Condition ::= (ConditionOrNode) Condition OR CondTerm
          |
          (ConditionNode) CondTerm
          ;

CondTerm ::= (CondTermAndNode) CondTerm AND CondFact
          |
          (CondTermNode) CondFact
          ;

CondFact ::= (CondFactRelopNode) Expr Relop Expr
            |
            (CondFactNode) Expr
            ;

Expr ::= (ExprAddopNode) Expr Addop Term
		|
		(ExprNode) OptMinus Term
		;

OptMinus ::= (UnMinus) MINUS
            |
            (NoUnMinus)/* epsilon */
            ;

OptExpr ::= (OptExprNode) Expr
		|
		(NoOptExprNode) /* epsilon */
		;

Term ::= (TermMulopNode) Term Mulop Factor
        |
        (TermNode) Factor
        ;

Factor ::= (FactorDesignatorNode) Designator
        |
		(FactorCallNode) MethodCall
		|
		(FactorConstNode) ConstValue
		|
		(FactorNewNode) NEW Type OptNewArray
		|
		(FactorExprNode) LPAREN Expr RPAREN
		|
        (ErrorFactorNode) error:e {: parser.report_error("Invalid factor. ", null); :}
		;

OptNewArray ::=  (OptNewArrayNode) LBOX Expr RBOX
			|
			(NoOptNewArrayNode) /* epsilon */
			;

Designator ::= (DesignatorChainNode) Designator DOT IDENT:name
            |
            (DesignatorIndexNode) Designator LBOX Expr RBOX
            |
            (DesignatorNode) IDENT:name
            ;

Relop ::= (RelopEqNode) EQ
		|
		(RelopNeqNode) NEQ
		|
		(RelopGtNode) GT
		|
		(RelopGteNode) GTE
		|
		(RelopLtNode) LT
		|
		(RelopLteNode) LTE
		;

Addop ::= (AddopPlusNode) PLUS
		|
		(AddopMinusNode) MINUS
		;

Mulop ::= (MulopMulNode) MUL
		|
		(MulopDivNode) DIV
		|
		(MulopModNode) MOD
		;
